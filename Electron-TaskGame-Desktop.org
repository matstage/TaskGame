#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:nil todo:nil |:t
#+title: Electron-TaskGame-Desktop
#+date: <2019-07-03 Wed>
#+author: Mats Tage Axelsson
#+email: matstage@mats-Ubuntu
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.1 (Org mode 9.2.3)
* A desktop gamified task manager
This application will reward you with bells and whistles when you finish your tasks on time.
In simple terms, this app will have the tasks, the goals and the deadline for your tasks.
When you finish a task, the application will reward you.
It will also keep track of your successes and failures.
* Needs and features.
** Main task window
Create a class to handle different windows.
** Adding a task
Includes defining task, scheduling and tracking a task.

** Closing a task.
Reporting successes and failures. It also helps you take note of lessons learned.

** Listing tasks
List needs to be possible to filter on project, status (Started, On-time, Late, Success) Time scheduled, Date scheduled, Time & Date finished.

** Storing project data
We create a subclass that stores the data. When a change of storage system is needed, we change the class and leave the other code alone.
** Initiating your directory
You may want to use a version controlled repository for your project, in fact, you should.
To do this, just run git init in the library. Alternatively, create a repository in one of the web-based ones and pull it down.

* Installing Dependencies


* File structure
Files are separated in a few files per window, usually an HTML file and a corresponding JavaScript file.
The exception is the main.js file that controls the whole process.

'main.js' in the root directory of the application sets up as little as possible while it loads in, requires the classes.
Theses classes are

#+BEGIN_SRC sh
npm install electron materialize-css
#+END_SRC

#+begin_src javascript :tangle main.js
const {app, ipcMain} = require('electron')
const path = require('path')
#+end_src

#+begin_src javascript :tangle
// The main electron Modules

const {app, ipcMain} = require('electron')
const path = require('path')

const Window = require('./Window.js')
const DataStore = require('./DataStore.js')

require('electron-reload');

// create the Store for my tasks
const taskData =new DataStore({name: 'Task List'})
#+end_src

#+begin_src json
{
  "name": "taskgame",
  "version": "1.0.0",
  "description": "This is a task app that uses gamification to incourage you in your endeavors.",
  "main": "main.js",
    "scripts": {
        "start" : "electron .",
        "test": "echo \"Error: no test specified\" && exit 1"
  },
#+end_src

As you can see in the script, test procedures are also defined but that is for another time.
Further down in this file, you will soon see the packages that you install to make the project.
To install your dependencies, use npm.

#+begin_src sh
npm install electron materialize-css
#+end_src

Note that you can install electron globally but that may cause problems if you have several projects running and you need to keep different versions for each project. You also do not need root to install in your project directory.

**** The first code

Now it is time to write your first file with code in it.
For anything to work, you must include the parts you need, in our case Electron, at least.

#+begin_src javascript tangle: main.js
const {app, BrowserWindow, Menu, ipcMain, ipcRenderer} = require('electron')
const path = require('path')
#+end_src
